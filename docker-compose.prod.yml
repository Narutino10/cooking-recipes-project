version: '3.8'

services:
  # Base de donn√©es PostgreSQL (Production)
  database:
    image: postgres:16-alpine
    container_name: cooking-recipes-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - cooking-network-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend NestJS (Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: cooking-recipes-backend-prod
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      DATABASE_HOST: database
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - cooking-network-prod

  # Frontend React (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: cooking-recipes-frontend-prod
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - cooking-network-prod

volumes:
  postgres_data_prod:
    driver: local

networks:
  cooking-network-prod:
    driver: bridge
